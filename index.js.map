{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js"],"sourcesContent":["import Axios from 'axios';\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\n\n\nexport function getImagesByQuery(query) {\n       \n    return Axios.get(\"https://pixabay.com/api/\", {\n        params: {\n            key: '50312672-6ff896f2a2c8f700d68e76dd9',\n            q: query,\n            image_type: 'photo',\n            orientation: 'horizontal',\n            safesearch: 'true',\n        }\n    }).then(res => {\n        if (res.data.hits.length === 0) {\n            iziToast.warning({\n                message: 'Sorry, there are no images matching your search query. Please try again!',\n                position: 'topRight',\n                backgroundColor: '#ef4040',\n                titleColor: 'white',\n                messageColor: 'white',\n            });\n            return [];\n        }\n\n        return res.data.hits.map(hit => {\n            console.log('hit:', hit);\n            return {\n                webformatURL: hit.webformatURL,\n                largeImageURL: hit.largeImageURL,\n                tags: hit.tags,\n                likes: hit.likes,\n                views: hit.views,\n                comments: hit.comments,\n                downloads: hit.downloads\n            }\n});\n        });\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// export function getImagesByQuery(query) {\n//     const BASE_URL = 'https://pixabay.com/api/';\n\n//     const params = new URLSearchParams({\n//         key: '50312672-6ff896f2a2c8f700d68e76dd9',\n//         q: query,\n//         image_type: 'photo',\n//         orientation: 'horizontal',\n//         safesearch: 'true',      \n\n//     });\n\n//     const url = `${BASE_URL}?${params}`\n    \n//     return fetch(url, {params}).then(res => res.json());\n    \n// }\n// getImagesByQuery('flower');\n\n\n\n\n\n\n\n// refs.formEl.addEventListener('submit', e => {\n//     e.preventDefault();\n\n//     const userValue = e.target.elements.query.value;\n// })","import { getImagesByQuery } from './pixabay-api';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\nconst galleryEl = document.querySelector('.gallery');\nconst formEl = document.querySelector('.form');\nconst userInput = document.querySelector('.input');\n\n\nformEl.addEventListener('submit', e => {\n    e.preventDefault();\n  \n    const userValue = userInput.value.trim();\n  \n    if (userValue.length === 0) {\n      iziToast.warning({\n        message: 'Будь ласка, введіть запит',\n        position: 'topRight',\n        backgroundColor: 'rgb(255, 0, 34)',\n        titleColor: 'white',\n        messageColor: 'white',\n      });\n      return;\n    }\n    clearGallery();\n  \n    showLoader();\n  \n    getImagesByQuery(userValue).then(images => {\n      createGallery(images);\n      hideLoader();\n  \n    })\n    .catch (error => {\n      console.error('Помилка при завантаженні зображень:', error);\n      hideLoader();\n    });\n  });\n  \n\nfunction createGallery(images) {\n    galleryEl.innerHTML = images.map(\n        ({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) => `\n      <li class=\"gallery-item\">\n        <a href=\"${largeImageURL}\">\n\n          <img src=\"${webformatURL}\"\n          alt=\"${tags}\"\n          title=\"Likes: ${likes} | Views: ${views} | Comments: ${comments} | Downloads: ${downloads}\"\n          />\n        </a>\n      </li>`\n    ).join('');\n\n\n\n\nlet lightbox = new SimpleLightbox('.gallery a', {\n    captions: true,\n    captionsData: 'title',\n    captionDelay: 250,\n    captionPosition: 'bottom',\n    captionClass: ''\n});\n\n    lightbox.refresh();\n}\n\nfunction clearGallery() {\n    const galleryEl = document.querySelector('.gallery');\n    galleryEl.innerHTML = '';\n}\n\nfunction showLoader() {\n    const loader = document.querySelector('.loader');\n    loader.classList.add('is-visible');\n}\n\nfunction hideLoader() {\n    const loader = document.querySelector('.loader');\n    loader.classList.remove('is-visible');\n}\n"],"names":["getImagesByQuery","query","Axios","res","iziToast","hit","galleryEl","formEl","userInput","e","userValue","clearGallery","showLoader","images","createGallery","hideLoader","error","webformatURL","largeImageURL","tags","likes","views","comments","downloads","SimpleLightbox"],"mappings":"owBAOO,SAASA,EAAiBC,EAAO,CAEpC,OAAOC,EAAM,IAAI,2BAA4B,CACzC,OAAQ,CACJ,IAAK,qCACL,EAAGD,EACH,WAAY,QACZ,YAAa,aACb,WAAY,MACf,CACT,CAAK,EAAE,KAAKE,GACAA,EAAI,KAAK,KAAK,SAAW,GACzBC,EAAS,QAAQ,CACb,QAAS,2EACT,SAAU,WACV,gBAAiB,UACjB,WAAY,QACZ,aAAc,OAC9B,CAAa,EACM,IAGJD,EAAI,KAAK,KAAK,IAAIE,IACrB,QAAQ,IAAI,OAAQA,CAAG,EAChB,CACH,aAAcA,EAAI,aAClB,cAAeA,EAAI,cACnB,KAAMA,EAAI,KACV,MAAOA,EAAI,MACX,MAAOA,EAAI,MACX,SAAUA,EAAI,SACd,UAAWA,EAAI,SAClB,EACZ,CACQ,CACT,CCpCA,MAAMC,EAAY,SAAS,cAAc,UAAU,EAC7CC,EAAS,SAAS,cAAc,OAAO,EACvCC,EAAY,SAAS,cAAc,QAAQ,EAGjDD,EAAO,iBAAiB,SAAUE,GAAK,CACnCA,EAAE,eAAc,EAEhB,MAAMC,EAAYF,EAAU,MAAM,KAAI,EAEtC,GAAIE,EAAU,SAAW,EAAG,CAC1BN,EAAS,QAAQ,CACf,QAAS,4BACT,SAAU,WACV,gBAAiB,kBACjB,WAAY,QACZ,aAAc,OACtB,CAAO,EACD,MACD,CACDO,IAEAC,IAEAZ,EAAiBU,CAAS,EAAE,KAAKG,GAAU,CACzCC,EAAcD,CAAM,EACpBE,GAEN,CAAK,EACA,MAAOC,GAAS,CACf,QAAQ,MAAM,sCAAuCA,CAAK,EAC1DD,GACN,CAAK,CACL,CAAG,EAGH,SAASD,EAAcD,EAAQ,CAC3BP,EAAU,UAAYO,EAAO,IACzB,CAAC,CAAE,aAAAI,EAAc,cAAAC,EAAe,KAAAC,EAAM,MAAAC,EAAO,MAAAC,EAAO,SAAAC,EAAU,UAAAC,CAAS,IAAO;AAAA;AAAA,mBAEnEL,CAAa;AAAA;AAAA,sBAEVD,CAAY;AAAA,iBACjBE,CAAI;AAAA,0BACKC,CAAK,aAAaC,CAAK,gBAAgBC,CAAQ,iBAAiBC,CAAS;AAAA;AAAA;AAAA,YAInG,EAAM,KAAK,EAAE,EAKE,IAAIC,EAAe,aAAc,CAC5C,SAAU,GACV,aAAc,QACd,aAAc,IACd,gBAAiB,SACjB,aAAc,EAClB,CAAC,EAEY,QAAO,CACpB,CAEA,SAASb,GAAe,CACpB,MAAML,EAAY,SAAS,cAAc,UAAU,EACnDA,EAAU,UAAY,EAC1B,CAEA,SAASM,GAAa,CACH,SAAS,cAAc,SAAS,EACxC,UAAU,IAAI,YAAY,CACrC,CAEA,SAASG,GAAa,CACH,SAAS,cAAc,SAAS,EACxC,UAAU,OAAO,YAAY,CACxC"}